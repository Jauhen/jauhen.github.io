{"version":3,"sources":["Box.js","App.js","serviceWorker.js","index.js"],"names":["roundToPrecision","x","precision","y","undefined","buildRectangle","startX","startY","width","length","NE","toString","SE","NW","SW","Box","this","props","height","thickness","sections","bottom","sideE","sideS","sideW","sideN","insideGap","insideE","insideS","insideW","insideN","flapEN","flapES","flapWS","flapWN","leftSlots","rightSlots","fromTop","slotHalfWidth","i","push","leftSlotsPath","map","slot","join","rightSlotsPath","reverse","cutPath","scoreMain","scoreLeftFlap","scoreRightFlap","scoreTopFlap","scoreBottomFlap","scoreFlaps","half","sectionBottoms","sectionBorders","insetFlapsLeft","insetFlapsRight","fromTopInsert","insertCut","border","insertScore","flatMap","slice","totalTopWidth","totalBottomWidth","Math","max","flap","min","console","log","className","id","data-width","xmlns","version","viewBox","preserveAspectRatio","stroke","fill","strokeWidth","d","strokeDasharray","box","startx","starty","React","Component","App","state","handleInputChange","bind","handleSectionsSizeChange","handleSectionLengthChange","setTimeout","updateDownloadLinks","document","getElementById","setState","topName","topSvg","innerHTML","topData","Blob","type","topUrl","window","URL","createObjectURL","topWidth","dataset","bottomName","bottomSvg","bottomData","bottomUrl","bottomWidth","event","target","name","value","isNaN","parseFloat","size","rest","total","reduce","sum","val","parseInt","sectionSize","Array","from","index","split","start","htmlFor","list","onChange","style","label","key","href","download","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAGA,SAASA,EAAiBC,EAAGC,GAC3B,IAAIC,GAAKF,QAAmBG,IAAdF,EAA0B,GAAMA,EAAY,GAC1D,OAAOC,EAAKA,QAAmBC,IAAdF,EAA0B,GAAKA,GAoBlD,SAASG,EAAeC,EAAQC,EAAQC,EAAOC,GAC7C,OAAID,GAAS,GAAKC,GAAU,EACnB,CACLC,GAAI,CAAET,EAAGK,EAAQH,EAAGI,EAAQI,SAAU,2BAASL,EAAT,YAAmBC,KACzDK,GAAI,CACFX,EAAGK,EACHH,EAAGI,EAASE,EACZE,SAAU,2BAASL,EAAT,YAAmBC,EAASE,KAExCI,GAAI,CACFZ,EAAGK,EAASE,EACZL,EAAGI,EACHI,SAAU,2BAASL,EAASE,EAAlB,YAA2BD,KAEvCO,GAAI,CACFb,EAAGK,EAASE,EACZL,EAAGI,EAASE,EACZE,SAAU,2BAASL,EAASE,EAAlB,YAA2BD,EAASE,MAKhDD,EAAQ,GAAKC,GAAU,EAClB,CACLI,GAAI,CAAEZ,EAAGK,EAAQH,EAAGI,EAAQI,SAAU,2BAASL,EAAT,YAAmBC,KACzDO,GAAI,CACFb,EAAGK,EACHH,EAAGI,EAASE,EACZE,SAAU,2BAASL,EAAT,YAAmBC,EAASE,KAExCC,GAAI,CACFT,EAAGK,EAASE,EACZL,EAAGI,EACHI,SAAU,2BAASL,EAASE,EAAlB,YAA2BD,KAEvCK,GAAI,CACFX,EAAGK,EAASE,EACZL,EAAGI,EAASE,EACZE,SAAU,2BAASL,EAASE,EAAlB,YAA2BD,EAASE,MAKhDD,GAAS,GAAKC,EAAS,EAClB,CACLG,GAAI,CAAEX,EAAGK,EAAQH,EAAGI,EAAQI,SAAU,2BAASL,EAAT,YAAmBC,KACzDG,GAAI,CACFT,EAAGK,EACHH,EAAGI,EAASE,EACZE,SAAU,2BAASL,EAAT,YAAmBC,EAASE,KAExCK,GAAI,CACFb,EAAGK,EAASE,EACZL,EAAGI,EACHI,SAAU,2BAASL,EAASE,EAAlB,YAA2BD,KAEvCM,GAAI,CACFZ,EAAGK,EAASE,EACZL,EAAGI,EAASE,EACZE,SAAU,2BAASL,EAASE,EAAlB,YAA2BD,EAASE,MAKhDD,EAAQ,GAAKC,EAAS,EACjB,CACLK,GAAI,CAAEb,EAAGK,EAAQH,EAAGI,EAAQI,SAAU,2BAASL,EAAT,YAAmBC,KACzDM,GAAI,CACFZ,EAAGK,EACHH,EAAGI,EAASE,EACZE,SAAU,2BAASL,EAAT,YAAmBC,EAASE,KAExCG,GAAI,CACFX,EAAGK,EAASE,EACZL,EAAGI,EACHI,SAAU,2BAASL,EAASE,EAAlB,YAA2BD,KAEvCG,GAAI,CACFT,EAAGK,EAASE,EACZL,EAAGI,EAASE,EACZE,SAAU,2BAASL,EAASE,EAAlB,YAA2BD,EAASE,WAhBpD,EAsVaM,M,iLAraX,OAAKC,KAAKC,MAAMT,OAAUQ,KAAKC,MAAMR,QAAWO,KAAKC,MAAMC,OAqG/D,SAAaV,EAAOC,EAAQS,EAAQC,EAAWC,EAAUd,EAAQC,GAgE/D,IA/DA,IAAMc,EAAShB,EAAeC,EAAQC,EAAQC,EAAOC,GAE/Ca,EAAQjB,EAAeC,EAAQC,GAASW,EAAQT,GAChDc,EAAQlB,EAAeC,EAAQC,EAASE,EAAQD,EAAOU,GACvDM,EAAQnB,EAAeC,EAASE,EAAOD,EAAQW,EAAQT,GACvDgB,EAAQpB,EAAeC,EAAQC,EAAQC,GAAQU,GAE/CQ,EAAY,KAAOP,EAEnBQ,EAAUtB,EACdC,EAASY,EAASC,EAClBZ,EAASmB,GACRR,EAASC,EACVV,EAAS,EAAEiB,GAEPE,EAAUvB,EACdC,EAASoB,EACTnB,EAASE,EAASS,EAASC,EAC3BX,EAAS,EAAEkB,EACXR,EAASC,GAELU,EAAUxB,EACdC,EAASE,EAAQU,EAASC,EAC1BZ,EAASmB,EACTR,EAASC,EACTV,EAAU,EAAEiB,GAERI,EAAUzB,EACdC,EAASoB,EACTnB,EAASW,EAASC,EAClBX,EAAQ,EAAEkB,GACTR,EAASC,GAGNY,EAAS1B,EACbC,EAASa,EACTZ,EACU,EAAIY,EAAbD,GACAV,EAAQ,GAELwB,EAAS3B,EACbC,EAASa,EACTZ,EAASE,EACC,EAAIU,EAAbD,EACDV,EAAQ,GAEJyB,EAAS5B,EACbC,EAASE,EAAQW,EACjBZ,EAASE,EACTS,EAAS,EAAIC,EACbX,EAAQ,GAEJ0B,EAAS7B,EACbC,EAASE,EAAQW,EACjBZ,EACAW,EAAS,EAAIC,GACZX,EAAQ,GAGL2B,EAAY,GACZC,EAAa,GACfC,EAAUjB,EAAS,GACjBkB,EAAgB,IAAOnB,EACpBoB,EAAI,EAAGA,EAAInB,EAASX,OAAQ8B,IACnCJ,EAAUK,KACRnC,EACEsB,EAAQjB,GAAGT,EACXqB,EAAMZ,GAAGP,EAAIkC,EAAUC,EACvBpB,EAASC,EACO,EAAhBmB,IAGJF,EAAWI,KACTnC,EACEwB,EAAQnB,GAAGT,EACXuB,EAAMd,GAAGP,EAAIkC,EAAUC,EACvBpB,EAASC,EACO,EAAhBmB,IAGJD,GAAWjB,EAASmB,GA+DtB,IA5DA,IAAME,EAAgBN,EACnBO,KAAI,SAACC,GAAD,gBAAaA,EAAKjC,GAAlB,YAAwBiC,EAAK9B,GAA7B,YAAmC8B,EAAK7B,GAAxC,YAA8C6B,EAAK/B,OACvDgC,KAAK,KACFC,EAAiBT,EACpBU,UACAJ,KAAI,SAACC,GAAD,gBAAaA,EAAK7B,GAAlB,YAAwB6B,EAAK/B,GAA7B,YAAmC+B,EAAKjC,GAAxC,YAA8CiC,EAAK9B,OACvD+B,KAAK,KAEFG,EAAO,YAAQ1B,EAAOX,GAAf,iBACTqB,EAAOjB,GADE,YACIiB,EAAOlB,GADX,YACiBkB,EAAOrB,GADxB,YAC8BqB,EAAOnB,GADrC,iBAETU,EAAMZ,GAFG,YAEGiB,EAAQd,GAFX,YAEiBc,EAAQjB,GAFzB,iBAGT+B,EAHS,iBAITd,EAAQf,GAJC,YAIKe,EAAQb,GAJb,YAImBQ,EAAMV,GAJzB,iBAKToB,EAAOtB,GALE,YAKIsB,EAAOpB,GALX,YAKiBoB,EAAOlB,GALxB,YAK8BkB,EAAOnB,GALrC,iBAMTQ,EAAOT,GANE,iBAOTW,EAAMX,GAPG,YAOGgB,EAAQlB,GAPX,YAOiBkB,EAAQhB,GAPzB,YAO+BgB,EAAQd,GAPvC,YAO6Cc,EAAQf,GAPrD,aAO4DU,EAAMT,GAPlE,iBAQTO,EAAOP,GARE,iBASTmB,EAAOvB,GATE,YASIuB,EAAOrB,GATX,YASiBqB,EAAOnB,GATxB,YAS8BmB,EAAOpB,GATrC,iBAUTW,EAAMV,GAVG,YAUGe,EAAQjB,GAVX,YAUiBiB,EAAQf,GAVzB,iBAWT+B,EAXS,iBAYThB,EAAQhB,GAZC,YAYKgB,EAAQnB,GAZb,YAYmBc,EAAMX,GAZzB,iBAaTqB,EAAOpB,GAbE,YAaIoB,EAAOrB,GAbX,YAaiBqB,EAAOxB,GAbxB,YAa8BwB,EAAOtB,GAbrC,kBAcTS,EAAOR,GAdE,iBAeTY,EAAMZ,GAfG,YAeGiB,EAAQhB,GAfX,YAeiBgB,EAAQjB,GAfzB,YAe+BiB,EAAQpB,GAfvC,YAe6CoB,EAAQlB,GAfrD,YAe2Da,EAAMf,GAfjE,iBAgBTW,EAAOX,IAELsC,EAAS,YAAQ3B,EAAOX,GAAf,YAAqBW,EAAOT,GAA5B,YAAkCS,EAAOP,GAAzC,YAA+CO,EAAOR,GAAtD,YAA4DQ,EAAOX,IAC5EuC,EAAa,YAAQ3B,EAAMZ,GAAd,YAAoBY,EAAMV,GAA1B,cAAkCe,EAAQd,GAA1C,YAAgDc,EAAQb,IACrEoC,EAAc,YAAQ1B,EAAMX,GAAd,YAAoBW,EAAMV,GAA1B,cAAkCe,EAAQnB,GAA1C,YAAgDmB,EAAQjB,IACtEuC,EAAY,YAAQ1B,EAAMf,GAAd,YAAoBe,EAAMZ,GAA1B,cAAkCiB,EAAQlB,GAA1C,YAAgDkB,EAAQhB,IACpEsC,EAAe,YAAQ7B,EAAMX,GAAd,YAAoBW,EAAMT,GAA1B,cAAkCc,EAAQlB,GAA1C,YAAgDkB,EAAQf,IAEvEwC,EAAU,YAAQtB,EAAOnB,GAAf,YAAqBmB,EAAOjB,GAA5B,qBACRkB,EAAOtB,GADC,YACKsB,EAAOnB,GADZ,qBAERqB,EAAOtB,GAFC,YAEKsB,EAAOpB,GAFZ,qBAGRmB,EAAOvB,GAHC,YAGKuB,EAAOpB,IAEtByC,EAAOnC,EAAY,EAEnBoC,EAAiB,GACjBC,EAAiB,CACrBnD,EAAeC,EAASgD,EAAM/C,EAAQC,EAAQW,GAAYD,EAASoC,IAE/DG,EAAiB,CACrBpD,EACEC,EAASgD,EACT/C,EAAS+C,GACRlC,EAAS,GAAK,EAAIkC,EACT,EAAIA,EAAbpC,IAGCwC,EAAkB,CACtBrD,EACEC,EAASE,EAAQ8C,EACjB/C,EAAS+C,EACTlC,EAAS,GAAK,EAAIkC,EACR,EAAIA,EAAbpC,IAGDyC,EAAgB,EACXpB,EAAI,EAAGA,EAAInB,EAASX,OAAQ8B,IACnCgB,EAAef,KACbnC,EACEC,EAASgD,EACT/C,EAASoD,EACTnD,EAAQW,EACRC,EAASmB,GAAKe,IAGlBG,EAAejB,KACbnC,EACEC,EAASgD,EACT/C,EAASoD,EAAgBL,EACf,EAAIA,EAAbpC,EACDE,EAASmB,GAAK,EAAIe,IAGtBI,EAAgBlB,KACdnC,EACEC,EAASE,EAAQ8C,EACjB/C,EAASoD,EAAgBL,EACzBpC,EAAS,EAAIoC,EACblC,EAASmB,GAAK,EAAIe,IAGtBE,EAAehB,KACbnC,EACEC,EAASgD,EACT/C,EAASoD,EAAgBvC,EAASmB,GAAKe,EACvC9C,EAAQW,EACRD,EAASoC,IAGbG,EAAejB,KACbnC,EACEC,EAASgD,EACT/C,EAASoD,EAAgBvC,EAASmB,IACjCnB,EAASmB,GAAK,EAAIe,EACnBpC,EAAS,EAAIoC,IAGjBI,EAAgBlB,KACdnC,EACEC,EAASE,EAAQ8C,EACjB/C,EAASoD,EAAgBvC,EAASmB,GAClCnB,EAASmB,GAAK,EAAIe,EAClBpC,EAAS,EAAIoC,IAGbf,EAAInB,EAASX,OAAS,IACxB+C,EAAehB,KACbnC,EACEC,EAASgD,EACT/C,EAASoD,EAAgBvC,EAASmB,GAAKrB,EAASoC,EAChD9C,EAAQW,EACRD,EAASoC,IAGbG,EAAejB,KACbnC,EACEC,EAASgD,EACT/C,EAASoD,EAAgBvC,EAASmB,GAAKrB,GACtCE,EAASmB,EAAI,GAAK,EAAIe,EACvBpC,EAAS,EAAIoC,IAGjBI,EAAgBlB,KACdnC,EACEC,EAASE,EAAQ8C,EACjB/C,EAASoD,EAAgBvC,EAASmB,GAAKrB,EACvCE,EAASmB,EAAI,GAAK,EAAIe,EACtBpC,EAAS,EAAIoC,KAInBK,GAAiBvC,EAASmB,GAAK,EAAIrB,EAAS,EAAIoC,EAGlD,IAAMM,EAAY,CAChB,IACAH,EACGf,KAAI,SAACmB,GAAD,gBAAeA,EAAOhD,GAAtB,YAA4BgD,EAAOnD,GAAnC,YAAyCmD,EAAOjD,GAAhD,YAAsDiD,EAAO/C,OACjE8B,KAAK,KACRc,EACGZ,UACAJ,KAAI,SAACmB,GAAD,gBAAeA,EAAOjD,GAAtB,YAA4BiD,EAAO/C,GAAnC,YAAyC+C,EAAOhD,GAAhD,YAAsDgD,EAAOnD,OACjEkC,KAAK,KACRa,EAAe,GAAG5C,IAClB+B,KAAK,KAEDkB,EAAc,CAAC,KAAD,OACbL,EAAe,GAAG5C,GADL,YACW4C,EAAeA,EAAehD,OAAS,GAAGK,IADrD,YAEb4C,EAAgB,GAAG9C,GAFN,YAGhB8C,EAAgBA,EAAgBjD,OAAS,GAAGC,IAH5B,UAKf8C,EACAO,SAAQ,SAACF,GAAD,MAAY,CAAC,KAAD,OACdA,EAAOnD,GADO,YACDmD,EAAOhD,IADN,YAEdgD,EAAOjD,GAFO,YAEDiD,EAAO/C,QAE1BkD,MAAM,GAAI,GACVpB,KAAK,KAXU,MAYlBA,KAAK,KAEDqB,EAAgBjE,EAAgC,IAAf6B,EAAQf,GAAGb,EAAyB,IAAf0B,EAAQf,GAAGX,GAAW,IAC5EiE,EAAmBlE,EACiC,IAAxDmE,KAAKC,IAAL,MAAAD,KAAI,YAAQT,EAAgBhB,KAAI,SAAC2B,GAAD,OAAUA,EAAKvD,GAAGb,OACI,IAAtDkE,KAAKG,IAAL,MAAAH,KAAI,YAAQV,EAAef,KAAI,SAAC2B,GAAD,OAAUA,EAAKzD,GAAGX,QAAW,IAI9D,OAFDsE,QAAQC,IAAIN,EAAkBC,KAAKC,IAAL,MAAAD,KAAI,YAAQT,EAAgBhB,KAAI,SAAC2B,GAAD,OAAUA,EAAKvD,GAAGb,OAAKkE,KAAKG,IAAL,MAAAH,KAAI,YAAQV,EAAef,KAAI,SAAC2B,GAAD,OAAUA,EAAKzD,GAAGX,QAGnI,yBAAKwE,UAAU,mBACb,yBAAKA,UAAU,eAAeC,GAAG,UAAUC,aAAYV,GACrD,yBACEW,MAAM,6BACNC,QAAQ,MACRC,QAAQ,cACRC,oBAAoB,iBACpB,uDACA,uBACEN,UAAU,MACVO,OAAO,iBACPC,KAAK,OACLC,YAAY,MACZ,0BAAMT,UAAU,MAAMC,GAAG,UAAUS,EAAGpC,KAExC,uBACE0B,UAAU,OACVO,OAAO,mBACPC,KAAK,OACLC,YAAY,MACZE,gBAAgB,OAChB,0BACEX,UAAU,OACVC,GAAG,OACHS,EAAC,UAAKnC,EAAL,yBACDC,EADC,yBAEDE,EAFC,yBAGDD,EAHC,yBAIDE,EAJC,yBAKDC,QAKR,yBACEoB,UAAU,eACVC,GAAG,aACHC,aAAYT,GACZ,yBACEU,MAAM,6BACNE,QAAQ,cACRC,oBAAoB,iBACpB,2CACA,uBACEN,UAAU,MACVO,OAAO,iBACPC,KAAK,OACLC,YAAY,OACZ,0BAAMT,UAAU,MAAMC,GAAG,UAAUS,EAAGvB,KAExC,uBACEa,UAAU,OACVO,OAAO,mBACPC,KAAK,OACLC,YAAY,MACZE,gBAAgB,OAChB,0BAAMX,UAAU,OAAOC,GAAG,SAASS,EAAGrB,QA1ZvCuB,CACLrE,KAAKC,MAAMT,MACXQ,KAAKC,MAAMR,OACXO,KAAKC,MAAMC,OACXF,KAAKC,MAAME,UACXH,KAAKC,MAAMG,SACXJ,KAAKC,MAAMqE,OACXtE,KAAKC,MAAMsE,QATH,kC,GAHIC,IAAMC,WCJxB,SAASzF,EAAiBC,EAAGC,GAC3B,IAAIC,GAAKF,QAAmBG,IAAdF,EAA0B,GAAMA,EAAY,GAC1D,OAAOC,EAAKA,QAAmBC,IAAdF,EAA0B,GAAKA,G,IA4OnCwF,E,YAxOb,WAAYzE,GAAQ,IAAD,8BACjB,4CAAMA,KACD0E,MAAQ,CACXlF,OAAQ,IACRD,MAAO,KACPU,OAAQ,GACRC,UAAW,IACXC,SAAU,CAAC,MAEb,EAAKwE,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,yBAA2B,EAAKA,yBAAyBD,KAA9B,gBAChC,EAAKE,0BAA4B,EAAKA,0BAA0BF,KAA/B,gBACjCG,YAAW,kBAAM,EAAKC,wBAAuB,KAZ5B,E,mFAgBjB,GAAKC,SAASC,eAAe,YAAeD,SAASC,eAAe,cAApE,CAGAnF,KAAKoF,SAAS,CACZC,QAAQ,OAAD,OAASrF,KAAK2E,MAAMlF,OAApB,YAA8BO,KAAK2E,MAAMnF,MAAzC,YAAkDQ,KAAK2E,MAAMzE,OAA7D,UAET,IAAMoF,EAASJ,SAASC,eAAe,WAAWI,UAC5CC,EAAU,IAAIC,KAAK,CAACH,GAAS,CAAEI,KAAM,eACrCC,EAASC,OAAOC,IAAIC,gBAAgBN,GAC1CxF,KAAKoF,SAAS,CAAEO,OAAQA,IACxB3F,KAAKoF,SAAS,CACZW,SAAUb,SAASC,eAAe,WAAWa,QAAQxG,QAGvDQ,KAAKoF,SAAS,CACZa,WAAW,UAAD,OAAYjG,KAAK2E,MAAMlF,OAAvB,YAAiCO,KAAK2E,MAAMnF,MAA5C,YAAqDQ,KAAK2E,MAAMzE,OAAhE,UAEZ,IAAMgG,EAAYhB,SAASC,eAAe,cAAcI,UAClDY,EAAa,IAAIV,KAAK,CAACS,GAAY,CAAER,KAAM,eAC3CU,EAAYR,OAAOC,IAAIC,gBAAgBK,GAC7CnG,KAAKoF,SAAS,CAAEgB,UAAWA,IAC3BpG,KAAKoF,SAAS,CACZiB,YAAanB,SAASC,eAAe,cAAca,QAAQxG,W,wCAI7C8G,GAAQ,IAAD,OACjBC,EAASD,EAAMC,OACfC,EAAOD,EAAO7C,GACd+C,EAAQF,EAAOE,MACrB,GAAIC,MAAMC,WAAWF,IACnBzG,KAAKoF,SAAL,eAAiBoB,EAAOC,QAD1B,CAIA,IAAMG,EAAOD,WAAWF,GAGxB,GAFAzG,KAAKoF,SAAL,eAAiBoB,EAAOI,IAEX,WAATJ,EAAmB,CAIrB,IAHA,IAAMpG,EAAWJ,KAAK2E,MAAMvE,SAAS4C,QAC/B6D,EAAOD,EACPE,EAAQ1G,EAAS2G,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,KACzC1F,EAAI,EAAGA,EAAInB,EAASX,OAAQ8B,IACnCnB,EAASmB,GAAKvC,EAAkBoB,EAASmB,GAAKsF,EAAQC,EAAO,KAE/D9G,KAAKoF,SAAS,CAAEhF,aAGlB4E,YAAW,kBAAM,EAAKC,wBAAuB,Q,+CAGtBqB,GAAQ,IAAD,OACxBG,EAAQS,SAASZ,EAAMC,OAAOE,OAC9BU,EAAcnI,EAAiBgB,KAAK2E,MAAMlF,OAASgH,EAAO,KAChEzG,KAAKoF,SAAS,CACZhF,SAAUgH,MAAMC,KAAK,CAAE5H,OAAQgH,IAAS,kBAAMU,OAEhDnC,YAAW,kBAAM,EAAKC,wBAAuB,O,gDAGrBqB,GAAQ,IAAD,OACzBG,EAAQE,WAAWL,EAAMC,OAAOE,OACtC,IAAIC,MAAMD,GAAV,CAGA,IAAMa,EAAQJ,SAASZ,EAAMC,OAAO7C,GAAG6D,MAAM,KAAK,IAC5CnH,EAAWJ,KAAK2E,MAAMvE,SAAS4C,QACrC5C,EAASkH,GAASb,EAClB,IAAMI,EACJ7G,KAAK2E,MAAMlF,OACXW,EAAS4C,MAAM,EAAGsE,EAAQ,GAAGP,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,KAC1D,GAAIJ,EAAO,EAET,IADA,IAAMC,EAAQ1G,EAAS4C,MAAMsE,EAAQ,GAAGP,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,KAC1D1F,EAAI+F,EAAQ,EAAG/F,EAAInB,EAASX,OAAQ8B,IAC3CnB,EAASmB,GAAKvC,EAAkBoB,EAASmB,GAAKsF,EAAQC,EAAO,KAGjE9G,KAAKoF,SAAS,CAAEhF,aAEhB4E,YAAW,kBAAM,EAAKC,wBAAuB,Q,+BAGrC,IAAD,OACDuC,EAA4B,EAApBxH,KAAK2E,MAAMzE,OAAoC,EAAvBF,KAAK2E,MAAMxE,UAAgB,GACjE,OACE,yBAAKsD,UAAU,aACb,yBAAKA,UAAU,aACb,6BACE,2BAAOgE,QAAQ,YAAf,YACA,6BACA,2BACE/D,GAAG,WACHgC,KAAK,QACLgC,KAAK,YACLpE,IAAI,IACJF,IAAI,IACJqD,MAAOzG,KAAK2E,MAAMvE,SAASX,OAC3BkI,SAAU3H,KAAK8E,yBACf8C,MAAO,CAAEpI,MAAO,WAElB,8BAAUkE,GAAG,aACX,4BAAQ+C,MAAM,IAAIoB,MAAM,MACxB,4BAAQpB,MAAM,IAAIoB,MAAM,MACxB,4BAAQpB,MAAM,IAAIoB,MAAM,MACxB,4BAAQpB,MAAM,IAAIoB,MAAM,MACxB,4BAAQpB,MAAM,IAAIoB,MAAM,MACxB,4BAAQpB,MAAM,IAAIoB,MAAM,MACxB,4BAAQpB,MAAM,IAAIoB,MAAM,MACxB,4BAAQpB,MAAM,IAAIoB,MAAM,QAG5B,6BACE,2BAAOJ,QAAQ,UAAf,UACA,6BACA,2BACE/D,GAAG,SACHgC,KAAK,SACLkB,KAAK,IACLtD,IAAI,IACJF,IAAI,MACJqD,MAAOzG,KAAK2E,MAAMlF,OAClBkI,SAAU3H,KAAK4E,oBAVnB,MAcA,6BACE,2BAAO6C,QAAQ,SAAf,SACA,6BACA,2BACE/D,GAAG,QACHgC,KAAK,SACLkB,KAAK,IACLtD,IAAI,IACJF,IAAI,MACJqD,MAAOzG,KAAK2E,MAAMnF,MAClBmI,SAAU3H,KAAK4E,oBAVnB,MAcA,6BACE,2BAAO6C,QAAQ,UAAf,UACA,6BACA,2BACE/D,GAAG,SACHgC,KAAK,SACLkB,KAAK,IACLtD,IAAI,IACJF,IAAI,MACJqD,MAAOzG,KAAK2E,MAAMzE,OAClByH,SAAU3H,KAAK4E,oBAVnB,MAcC5E,KAAK2E,MAAMvE,SAASsB,KAAI,SAACuF,EAAKK,GAAN,OACvB,yBAAKQ,IAAKR,GACR,2BAAOG,QAAO,kBAAaH,IAA3B,WACWA,EAAQ,EADnB,SAGA,6BACA,2BACE5D,GAAE,kBAAa4D,GACf5B,KAAK,SACLkB,KAAK,IACLtD,IAAI,IACJF,IAAI,MACJqD,MAAOQ,EACPU,SAAU,EAAK5C,4BAZnB,SAiBF,6BACE,2BAAO0C,QAAQ,aAAf,aACA,6BACA,2BACE/D,GAAG,YACHgC,KAAK,SACLpC,IAAI,IACJF,IAAI,KACJwD,KAAK,IACLH,MAAOzG,KAAK2E,MAAMxE,UAClBwH,SAAU3H,KAAK4E,oBAVnB,MAcA,6BACE,uBAAGmD,KAAM/H,KAAK2E,MAAMgB,OAAQqC,SAAUhI,KAAK2E,MAAMU,SAAjD,oBAGA,6BAJF,WAKWrF,KAAK2E,MAAMoB,SALtB,MAME,6BACA,6BACA,uBAAGgC,KAAM/H,KAAK2E,MAAMyB,UAAW4B,SAAUhI,KAAK2E,MAAMsB,YAApD,uBAGA,6BAXF,WAYWjG,KAAK2E,MAAM0B,YAZtB,MAaE,+BAGJ,yBAAK5C,UAAU,cACb,kBAAC,EAAD,CACEjE,MAAOQ,KAAK2E,MAAMnF,MAClBC,OAAQO,KAAK2E,MAAMlF,OACnBS,OAAQF,KAAK2E,MAAMzE,OACnBC,UAAWH,KAAK2E,MAAMxE,UACtBC,SAAUJ,KAAK2E,MAAMvE,SACrBkE,OAAQkD,EACRjD,OAAQiD,U,GAjOFhD,IAAMC,WCGJwD,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpD,SAASC,eAAe,SD6H3C,kBAAmBoD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvF,QAAQuF,MAAMA,EAAMC,c","file":"static/js/main.019a8d49.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction roundToPrecision(x, precision) {\r\n  var y = +x + (precision === undefined ? 0.5 : precision / 2);\r\n  return y - (y % (precision === undefined ? 1 : +precision));\r\n}\r\n\r\nclass Box extends React.Component {\r\n  render() {\r\n    if (!this.props.width || !this.props.length || !this.props.height) {\r\n      return (<div></div>);\r\n    }\r\n    return box(\r\n      this.props.width,\r\n      this.props.length,\r\n      this.props.height,\r\n      this.props.thickness,\r\n      this.props.sections,\r\n      this.props.startx,\r\n      this.props.starty\r\n    );\r\n  }\r\n}\r\n\r\nfunction buildRectangle(startX, startY, width, length) {\r\n  if (width >= 0 && length >= 0) {\r\n    return {\r\n      NE: { x: startX, y: startY, toString: () => `${startX},${startY}` },\r\n      SE: {\r\n        x: startX,\r\n        y: startY + length,\r\n        toString: () => `${startX},${startY + length}`,\r\n      },\r\n      NW: {\r\n        x: startX + width,\r\n        y: startY,\r\n        toString: () => `${startX + width},${startY}`,\r\n      },\r\n      SW: {\r\n        x: startX + width,\r\n        y: startY + length,\r\n        toString: () => `${startX + width},${startY + length}`,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (width < 0 && length >= 0) {\r\n    return {\r\n      NW: { x: startX, y: startY, toString: () => `${startX},${startY}` },\r\n      SW: {\r\n        x: startX,\r\n        y: startY + length,\r\n        toString: () => `${startX},${startY + length}`,\r\n      },\r\n      NE: {\r\n        x: startX + width,\r\n        y: startY,\r\n        toString: () => `${startX + width},${startY}`,\r\n      },\r\n      SE: {\r\n        x: startX + width,\r\n        y: startY + length,\r\n        toString: () => `${startX + width},${startY + length}`,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (width >= 0 && length < 0) {\r\n    return {\r\n      SE: { x: startX, y: startY, toString: () => `${startX},${startY}` },\r\n      NE: {\r\n        x: startX,\r\n        y: startY + length,\r\n        toString: () => `${startX},${startY + length}`,\r\n      },\r\n      SW: {\r\n        x: startX + width,\r\n        y: startY,\r\n        toString: () => `${startX + width},${startY}`,\r\n      },\r\n      NW: {\r\n        x: startX + width,\r\n        y: startY + length,\r\n        toString: () => `${startX + width},${startY + length}`,\r\n      },\r\n    };\r\n  }\r\n\r\n  if (width < 0 && length < 0) {\r\n    return {\r\n      SW: { x: startX, y: startY, toString: () => `${startX},${startY}` },\r\n      NW: {\r\n        x: startX,\r\n        y: startY + length,\r\n        toString: () => `${startX},${startY + length}`,\r\n      },\r\n      SE: {\r\n        x: startX + width,\r\n        y: startY,\r\n        toString: () => `${startX + width},${startY}`,\r\n      },\r\n      NE: {\r\n        x: startX + width,\r\n        y: startY + length,\r\n        toString: () => `${startX + width},${startY + length}`,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nfunction box(width, length, height, thickness, sections, startX, startY) {\r\n  const bottom = buildRectangle(startX, startY, width, length);\r\n\r\n  const sideE = buildRectangle(startX, startY, -height, length);\r\n  const sideS = buildRectangle(startX, startY + length, width, height);\r\n  const sideW = buildRectangle(startX + width, startY, height, length);\r\n  const sideN = buildRectangle(startX, startY, width, -height);\r\n\r\n  const insideGap = 1.25 * thickness;\r\n\r\n  const insideE = buildRectangle(\r\n    startX - height - thickness,\r\n    startY + insideGap,\r\n    -height + thickness,\r\n    length - 2*insideGap\r\n  );\r\n  const insideS = buildRectangle(\r\n    startX + insideGap,\r\n    startY + length + height + thickness,\r\n    width -  2*insideGap,\r\n    height - thickness\r\n  );\r\n  const insideW = buildRectangle(\r\n    startX + width + height + thickness,\r\n    startY + insideGap,\r\n    height - thickness,\r\n    length -  2*insideGap\r\n  );\r\n  const insideN = buildRectangle(\r\n    startX + insideGap,\r\n    startY - height - thickness,\r\n    width - 2*insideGap,\r\n    -height + thickness\r\n  );\r\n\r\n  const flapEN = buildRectangle(\r\n    startX - thickness,\r\n    startY,\r\n    -height + 2 * thickness,\r\n    -width / 2\r\n  );\r\n  const flapES = buildRectangle(\r\n    startX - thickness,\r\n    startY + length,\r\n    -height + 2 * thickness,\r\n    width / 2\r\n  );\r\n  const flapWS = buildRectangle(\r\n    startX + width + thickness,\r\n    startY + length,\r\n    height - 2 * thickness,\r\n    width / 2\r\n  );\r\n  const flapWN = buildRectangle(\r\n    startX + width + thickness,\r\n    startY,\r\n    height - 2 * thickness,\r\n    -width / 2\r\n  );\r\n\r\n  const leftSlots = [];\r\n  const rightSlots = [];\r\n  let fromTop = sections[0];\r\n  const slotHalfWidth = 0.75 * thickness;\r\n  for (let i = 1; i < sections.length; i++) {\r\n    leftSlots.push(\r\n      buildRectangle(\r\n        insideE.NE.x,\r\n        sideE.NE.y + fromTop - slotHalfWidth,\r\n        height - thickness,\r\n        slotHalfWidth * 2\r\n      )\r\n    );\r\n    rightSlots.push(\r\n      buildRectangle(\r\n        insideW.NE.x,\r\n        sideW.NE.y + fromTop - slotHalfWidth,\r\n        height - thickness,\r\n        slotHalfWidth * 2\r\n      )\r\n    );\r\n    fromTop += sections[i];\r\n  }\r\n\r\n  const leftSlotsPath = leftSlots\r\n    .map((slot) => `${slot.NE} ${slot.NW} ${slot.SW} ${slot.SE}`)\r\n    .join(' ');\r\n  const rightSlotsPath = rightSlots\r\n    .reverse()\r\n    .map((slot) => `${slot.SW} ${slot.SE} ${slot.NE} ${slot.NW}`)\r\n    .join(' ');\r\n\r\n  const cutPath = `M ${bottom.NE}\r\n    ${flapEN.SW} ${flapEN.NW} ${flapEN.NE} ${flapEN.SE}\r\n    ${sideE.NE} ${insideE.NW} ${insideE.NE}\r\n    ${leftSlotsPath}\r\n    ${insideE.SE} ${insideE.SW} ${sideE.SE}\r\n    ${flapES.NE} ${flapES.SE} ${flapES.SW} ${flapES.NW}\r\n    ${bottom.SE}\r\n    ${sideS.SE} ${insideS.NE} ${insideS.SE} ${insideS.SW} ${insideS.NW}  ${sideS.SW}\r\n    ${bottom.SW}\r\n    ${flapWS.NE} ${flapWS.SE} ${flapWS.SW} ${flapWS.NW}\r\n    ${sideW.SW} ${insideW.SE} ${insideW.SW}\r\n    ${rightSlotsPath}\r\n    ${insideW.NW} ${insideW.NE} ${sideW.NW}\r\n    ${flapWN.SW} ${flapWN.NW} ${flapWN.NE} ${flapWN.SE} \r\n    ${bottom.NW}\r\n    ${sideN.NW} ${insideN.SW} ${insideN.NW} ${insideN.NE} ${insideN.SE} ${sideN.NE}\r\n    ${bottom.NE}`;\r\n\r\n  const scoreMain = `M ${bottom.NE} ${bottom.SE} ${bottom.SW} ${bottom.NW} ${bottom.NE}`;\r\n  const scoreLeftFlap = `M ${sideE.NE} ${sideE.SE} M ${insideE.NW} ${insideE.SW}`;\r\n  const scoreRightFlap = `M ${sideW.NW} ${sideW.SW} M ${insideW.NE} ${insideW.SE}`;\r\n  const scoreTopFlap = `M ${sideN.NE} ${sideN.NW} M ${insideN.SE} ${insideN.SW}`;\r\n  const scoreBottomFlap = `M ${sideS.SE} ${sideS.SW} M ${insideS.NE} ${insideS.NW}`;\r\n\r\n  const scoreFlaps = `M ${flapEN.SE} ${flapEN.SW}\r\n      M ${flapES.NE} ${flapES.NW}\r\n      M ${flapWN.SE} ${flapWN.SW}\r\n      M ${flapWS.NE} ${flapWS.NW}`;\r\n\r\n  const half = thickness / 2;\r\n\r\n  const sectionBottoms = [];\r\n  const sectionBorders = [\r\n    buildRectangle(startX + half, startY, width - thickness, -height + half),\r\n  ];\r\n  const insetFlapsLeft = [\r\n    buildRectangle(\r\n      startX + half,\r\n      startY - half,\r\n      -sections[0] / 2 + half,\r\n      -height + 2 * half\r\n    ),\r\n  ];\r\n  const insetFlapsRight = [\r\n    buildRectangle(\r\n      startX + width - half,\r\n      startY - half,\r\n      sections[0] / 2 - half,\r\n      -height + 2 * half\r\n    ),\r\n  ];\r\n  let fromTopInsert = 0;\r\n  for (let i = 0; i < sections.length; i++) {\r\n    sectionBottoms.push(\r\n      buildRectangle(\r\n        startX + half,\r\n        startY + fromTopInsert,\r\n        width - thickness,\r\n        sections[i] - half\r\n      )\r\n    );\r\n    insetFlapsLeft.push(\r\n      buildRectangle(\r\n        startX + half,\r\n        startY + fromTopInsert + half,\r\n        -height + 2 * half,\r\n        sections[i] - 3 * half\r\n      )\r\n    );\r\n    insetFlapsRight.push(\r\n      buildRectangle(\r\n        startX + width - half,\r\n        startY + fromTopInsert + half,\r\n        height - 2 * half,\r\n        sections[i] - 3 * half\r\n      )\r\n    );\r\n    sectionBorders.push(\r\n      buildRectangle(\r\n        startX + half,\r\n        startY + fromTopInsert + sections[i] - half,\r\n        width - thickness,\r\n        height - half\r\n      )\r\n    );\r\n    insetFlapsLeft.push(\r\n      buildRectangle(\r\n        startX + half,\r\n        startY + fromTopInsert + sections[i],\r\n        -sections[i] / 2 + half,\r\n        height - 3 * half\r\n      )\r\n    );\r\n    insetFlapsRight.push(\r\n      buildRectangle(\r\n        startX + width - half,\r\n        startY + fromTopInsert + sections[i],\r\n        sections[i] / 2 - half,\r\n        height - 3 * half\r\n      )\r\n    );\r\n    if (i < sections.length - 1) {\r\n      sectionBorders.push(\r\n        buildRectangle(\r\n          startX + half,\r\n          startY + fromTopInsert + sections[i] + height - half,\r\n          width - thickness,\r\n          height - half\r\n        )\r\n      );\r\n      insetFlapsLeft.push(\r\n        buildRectangle(\r\n          startX + half,\r\n          startY + fromTopInsert + sections[i] + height,\r\n          -sections[i + 1] / 2 + half,\r\n          height - 3 * half\r\n        )\r\n      );\r\n      insetFlapsRight.push(\r\n        buildRectangle(\r\n          startX + width - half,\r\n          startY + fromTopInsert + sections[i] + height,\r\n          sections[i + 1] / 2 - half,\r\n          height - 3 * half\r\n        )\r\n      );\r\n    }\r\n    fromTopInsert += sections[i] + 2 * height - 2 * half;\r\n  }\r\n\r\n  const insertCut = [\r\n    'M',\r\n    insetFlapsLeft\r\n      .map((border) => `${border.NW} ${border.NE} ${border.SE} ${border.SW}`)\r\n      .join(' '),\r\n    insetFlapsRight\r\n      .reverse()\r\n      .map((border) => `${border.SE} ${border.SW} ${border.NW} ${border.NE}`)\r\n      .join(' '),\r\n    insetFlapsLeft[0].NW,\r\n  ].join(' ');\r\n\r\n  const insertScore = [\r\n    `M ${insetFlapsLeft[0].NW} ${insetFlapsLeft[insetFlapsLeft.length - 1].SW}`,\r\n    `M ${insetFlapsRight[0].SE} ${\r\n      insetFlapsRight[insetFlapsRight.length - 1].NE\r\n    }`,\r\n    `${sectionBorders\r\n      .flatMap((border) => [\r\n        `M ${border.NE} ${border.NW}`,\r\n        `M ${border.SE} ${border.SW}`,\r\n      ])\r\n      .slice(1, -1)\r\n      .join(' ')} `,\r\n  ].join(' ');\r\n\r\n  const totalTopWidth = roundToPrecision(insideW.SW.x * 100 - insideE.SE.x * 100) / 100;\r\n  const totalBottomWidth = roundToPrecision(\r\n    Math.max(...insetFlapsRight.map((flap) => flap.SW.x)) * 100 -\r\n    Math.min(...insetFlapsLeft.map((flap) => flap.SE.x))* 100) /100;\r\n\r\n console.log(totalBottomWidth, Math.max(...insetFlapsRight.map((flap) => flap.SW.x)), Math.min(...insetFlapsLeft.map((flap) => flap.SE.x)));\r\n\r\n  return (\r\n    <div className='boxesContainers'>\r\n      <div className='svgContainer' id='top_svg' data-width={totalTopWidth}>\r\n        <svg\r\n          xmlns='http://www.w3.org/2000/svg'\r\n          version='1.1'\r\n          viewBox='0 0 215 279'\r\n          preserveAspectRatio='xMinYMin meet'>\r\n          <title>Box without sections</title>\r\n          <g\r\n            className='cut'\r\n            stroke='rgb(220,20,60)'\r\n            fill='none'\r\n            strokeWidth='.2'>\r\n            <path className='cut' id='outside' d={cutPath} />\r\n          </g>\r\n          <g\r\n            className='fold'\r\n            stroke='rgb(0, 191, 255)'\r\n            fill='none'\r\n            strokeWidth='0.2'\r\n            strokeDasharray='1,1'>\r\n            <path\r\n              className='fold'\r\n              id='MAIN'\r\n              d={`${scoreMain}\r\n            ${scoreLeftFlap}\r\n            ${scoreTopFlap}\r\n            ${scoreRightFlap}\r\n            ${scoreBottomFlap}\r\n            ${scoreFlaps}`}\r\n            />\r\n          </g>\r\n        </svg>\r\n      </div>\r\n      <div\r\n        className='svgContainer'\r\n        id='bottom_svg'\r\n        data-width={totalBottomWidth}>\r\n        <svg\r\n          xmlns='http://www.w3.org/2000/svg'\r\n          viewBox='0 0 215 279'\r\n          preserveAspectRatio='xMinYMin meet'>\r\n          <title>Sections</title>\r\n          <g\r\n            className='cut'\r\n            stroke='rgb(220,20,60)'\r\n            fill='none'\r\n            strokeWidth='0.2'>\r\n            <path className='cut' id='outside' d={insertCut} />\r\n          </g>\r\n          <g\r\n            className='fold'\r\n            stroke='rgb(0, 191, 255)'\r\n            fill='none'\r\n            strokeWidth='0.2'\r\n            strokeDasharray='1,1'>\r\n            <path className='fold' id='INSERT' d={insertScore} />\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Box;\r\n","import React from 'react';\nimport './App.css';\nimport Box from './Box';\n\nfunction roundToPrecision(x, precision) {\n  var y = +x + (precision === undefined ? 0.5 : precision / 2);\n  return y - (y % (precision === undefined ? 1 : +precision));\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      length: 115,\n      width: 57.5,\n      height: 25,\n      thickness: 1.4,\n      sections: [115],\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSectionsSizeChange = this.handleSectionsSizeChange.bind(this);\n    this.handleSectionLengthChange = this.handleSectionLengthChange.bind(this);\n    setTimeout(() => this.updateDownloadLinks(), 100);\n  }\n\n  updateDownloadLinks() {\n    if (!document.getElementById('top_svg') || !document.getElementById('bottom_svg')) {\n      return;\n    }\n    this.setState({\n      topName: `top-${this.state.length}-${this.state.width}-${this.state.height}.svg`,\n    });\n    const topSvg = document.getElementById('top_svg').innerHTML;\n    const topData = new Blob([topSvg], { type: 'text/plain' });\n    const topUrl = window.URL.createObjectURL(topData);\n    this.setState({ topUrl: topUrl });\n    this.setState({\n      topWidth: document.getElementById('top_svg').dataset.width,\n    });\n\n    this.setState({\n      bottomName: `bottom-${this.state.length}-${this.state.width}-${this.state.height}.svg`,\n    });\n    const bottomSvg = document.getElementById('bottom_svg').innerHTML;\n    const bottomData = new Blob([bottomSvg], { type: 'text/plain' });\n    const bottomUrl = window.URL.createObjectURL(bottomData);\n    this.setState({ bottomUrl: bottomUrl });\n    this.setState({\n      bottomWidth: document.getElementById('bottom_svg').dataset.width,\n    });\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const name = target.id;\n    const value = target.value;\n    if (isNaN(parseFloat(value))) {\n      this.setState({ [name]: value });\n      return;\n    }\n    const size = parseFloat(value);\n    this.setState({ [name]: size });\n\n    if (name === 'length') {\n      const sections = this.state.sections.slice();\n      const rest = size ;\n      const total = sections.reduce((sum, val) => sum + val);\n      for (let i = 0; i < sections.length; i++) {\n        sections[i] = roundToPrecision((sections[i] * rest) / total, 0.01);\n      }\n      this.setState({ sections });\n    }\n\n    setTimeout(() => this.updateDownloadLinks(), 100);\n  }\n\n  handleSectionsSizeChange(event) {\n    const value = parseInt(event.target.value);\n    const sectionSize = roundToPrecision(this.state.length / value, 0.01);\n    this.setState({\n      sections: Array.from({ length: value }, () => sectionSize),\n    });\n    setTimeout(() => this.updateDownloadLinks(), 100);\n  }\n\n  handleSectionLengthChange(event) {\n    const value = parseFloat(event.target.value);\n    if (isNaN(value)) {\n      return;\n    }\n    const index = parseInt(event.target.id.split('-')[1]);\n    const sections = this.state.sections.slice();\n    sections[index] = value;\n    const rest =\n      this.state.length -\n      sections.slice(0, index + 1).reduce((sum, val) => sum + val);\n    if (rest > 0) {\n      const total = sections.slice(index + 1).reduce((sum, val) => sum + val);\n      for (let i = index + 1; i < sections.length; i++) {\n        sections[i] = roundToPrecision((sections[i] * rest) / total, 0.01);\n      }\n    }\n    this.setState({ sections });\n\n    setTimeout(() => this.updateDownloadLinks(), 100);\n  }\n\n  render() {\n    const start = this.state.height * 2 + this.state.thickness * 2 + 10;\n    return (\n      <div className='container'>\n        <div className='leftPanel'>\n          <div>\n            <label htmlFor='sections'>Sections</label>\n            <br />\n            <input\n              id='sections'\n              type='range'\n              list='tickmarks'\n              min='1'\n              max='8'\n              value={this.state.sections.length}\n              onChange={this.handleSectionsSizeChange}\n              style={{ width: '100px' }}\n            />\n            <datalist id='tickmarks'>\n              <option value='1' label='1'></option>\n              <option value='2' label='2'></option>\n              <option value='3' label='3'></option>\n              <option value='4' label='4'></option>\n              <option value='5' label='5'></option>\n              <option value='6' label='6'></option>\n              <option value='7' label='7'></option>\n              <option value='8' label='8'></option>\n            </datalist>\n          </div>\n          <div>\n            <label htmlFor='length'>Length</label>\n            <br />\n            <input\n              id='length'\n              type='number'\n              size='5'\n              min='0'\n              max='250'\n              value={this.state.length}\n              onChange={this.handleInputChange}\n            />\n            mm\n          </div>\n          <div>\n            <label htmlFor='width'>Width</label>\n            <br />\n            <input\n              id='width'\n              type='number'\n              size='5'\n              min='0'\n              max='250'\n              value={this.state.width}\n              onChange={this.handleInputChange}\n            />\n            mm\n          </div>\n          <div>\n            <label htmlFor='height'>Height</label>\n            <br />\n            <input\n              id='height'\n              type='number'\n              size='5'\n              min='0'\n              max='150'\n              value={this.state.height}\n              onChange={this.handleInputChange}\n            />\n            mm\n          </div>\n          {this.state.sections.map((val, index) => (\n            <div key={index}>\n              <label htmlFor={`section-${index}`}>\n                Section {index + 1} size\n              </label>\n              <br />\n              <input\n                id={`section-${index}`}\n                type='number'\n                size='5'\n                min='0'\n                max='250'\n                value={val}\n                onChange={this.handleSectionLengthChange}\n              />\n              mm\n            </div>\n          ))}\n          <div>\n            <label htmlFor='thickness'>Thickness</label>\n            <br />\n            <input\n              id='thickness'\n              type='number'\n              min='0'\n              max='20'\n              size='5'\n              value={this.state.thickness}\n              onChange={this.handleInputChange}\n            />\n            mm\n          </div>\n          <div>\n            <a href={this.state.topUrl} download={this.state.topName}>\n              Download top box\n            </a>\n            <br />\n            (Width: {this.state.topWidth}mm)\n            <br />\n            <br />\n            <a href={this.state.bottomUrl} download={this.state.bottomName}>\n              Download bottom box\n            </a>\n            <br />\n            (Width: {this.state.bottomWidth}mm)\n            <br />\n          </div>\n        </div>\n        <div className='rightPanel'>\n          <Box\n            width={this.state.width}\n            length={this.state.length}\n            height={this.state.height}\n            thickness={this.state.thickness}\n            sections={this.state.sections}\n            startx={start}\n            starty={start}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}